"""
Django settings for fiados project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import os 
from datetime import timedelta

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k#-$+9gsvz#0%o3w0f7n!g&p1-ddza2u72fw&#-8t$=s!vm-a0'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True
ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api.apps.ApiConfig',
    'rest_framework',
    'djoser',
    'social_django',
    'rest_framework_simplejwt', 
    'drf_spectacular', #django spectacular sirve como documentacion de swagger
    'corsheaders',
    'pwa',

]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Debe ir antes de cualquier middleware que maneje solicitudes
    'fiados.middleware.BlockPostmanMiddleware',
    'fiados.middleware.CustomHeaderMiddleware',
    'fiados.middleware.DisableAdminLogMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware', 
]

ROOT_URLCONF = 'fiados.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Asegúrate de que esta línea esté presente
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect'
            ],
        },
    },
]


JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "Fiador",


    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "Fiador",

    

    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "logo.png",

    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo": None,

    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": None,
    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo": None,

    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": None,

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-circle",

    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": None,

    # Welcome text on the login screen
    "welcome_sign": "Bienvenido. Por favor ingrese sus datos",

    # Copyright on the footer
    "copyright": "Fiador by jesusmedina0921@gmail.com",

    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you dont need to use a list, you can use a simple string 
  

    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar": None,

    ############
    # Top Menu #
    ############

    
    #############
    # User Menu #########@eqweqw@@@@@@@@
    #############

    # Additional links to include in the user menu on the top right ("app" url type is not allowed)
    ##"usermenu_links": [
    ##    {"name": "Docs", "url": "http://localhost:8000/api/docs/", "new_window": False},
   ##
    ##],

    #############
    # Side Menu #
    #############

    # Whether to display the side menu
    "show_sidebar": True,

    # Whether to aut expand the menu
    "navigation_expanded": True,

    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": [],

    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],

    # List of apps (and/or models) to base side menu ordering off of (does not need to contain all apps/models)
    "order_with_respect_to": ["auth", "books", "books.author", "books.book"],

    # Custom links to append to app groups, keyed on app name
    "custom_links": {
        "books": [{
            "name": "Make Messages", 
            "url": "make_messages", 
            "icon": "fas fa-comments",
            "permissions": ["books.view_book"]
        }]
    },

    # Custom icons for side menu apps/models See https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2
    # for the full list of 5.13.0 free icon classes
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
    },
    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",

    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": False,

    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": "css/custom_login.css",
    "custom_js": None,
    # Whether to link font from fonts.googleapis.com (use custom_css to supply font otherwise)
    "use_google_fonts_cdn": True,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": False,

    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
    "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
    
}

JAZZMIN_UI_TWEAKS = {
    
    "theme": "flatly",
}


WSGI_APPLICATION = 'fiados.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

#Base de datos en desarrollo
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Caracas' 

USE_I18N = True

USE_TZ = True
#Codigo para definir el formato de numeros. Ejemplo 100.000,00 (formato europeo/latinoamericano) o 100,000.00 (formato anglosajón),
USE_L10N = True  # Asegúrate que esté en True
USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/



STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define la ruta para STATIC_ROOT
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

####Mi Codigo

#Aqui indico y permito que URL pueda accedar a la api
CORS_ALLOW_ALL_ORIGINS = True


# ✅ Permitir redirecciones a protocolos personalizados (fiador://)
ALLOWED_REDIRECT_PROTOCOLS = ['http', 'https', 'fiador']

# ✅ Para versiones más recientes de Django, también necesitas:
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'X-Api-Secret'  # Header personalizado
]

CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# Validacion para que solo los urls del CORS consuman la api en produccion
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

SECURE_API_HEADER = 'X-Api-Secret'  
SECURE_API_VALUE = 'tucodigo'  # DEBE SER EL MISMO QUE EN ANGULAR
##EL CODIGO DE SECURE_API_VALUE ES CREADO POR MI, PUEDE SER EL QUE UNO QUIERA
AUTH_USER_MODEL = 'api.User'

REST_FRAMEWORK = {

    #DRF JWT
       'DEFAULT_AUTHENTICATION_CLASSES': (
           'rest_framework_simplejwt.authentication.JWTAuthentication',
       ),

    #PERMISOS
       'DEFAULT_PERMISSION_CLASS': ('rest_framework.permissions.IsAuthenticated',),
    #DRF SPECTACULAR
       'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
  
   }

SIMPLE_JWT = {
    'ALGORITHM': 'HS256',
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    #Tiempo de expiracion del TOKEN

    #PARA DESARROLLO ESTA CONFIGURACION

    # Tiempo de vida del token de acceso (default: 5 minutos)
    #'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # 1 hora
    ## Tiempo de vida del token de refresco (default: 1 día)
    #'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # 1 semana

    #PARA PRODUCCION ESTA CONFIGURACION
    #'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365*100),  # 100 años (prácticamente nunca)

    #'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365*100),  # 100 años (prácticamente nunca)
    # Tiempo de vida del token de refresco cuando se usa para renovar (default: None)
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,

    # Permite renovar el refresh token cada vez que se usa
    'ROTATE_REFRESH_TOKENS': True,
    
    # Invalida los refresh tokens después de usarlos
    'BLACKLIST_AFTER_ROTATION': True,
    
    # Actualiza la última hora de inicio de sesión del usuario
    'UPDATE_LAST_LOGIN': True,
}
##ESTE CODIGO SALE DE GMAIL DE VERIFICACION EN 2 PASOS...
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'tucrendenciales'
EMAIL_HOST_PASSWORD = 'tucrendenciales'
EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = 'tucorreo'
DOMAIN = 'localhost:8100'
SITE_NAME = 'Fiador' 
PROTOCOL = 'http'

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend'
)

DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'SEND_ACTIVATION_EMAIL': True,
    'SET_USERNAME_RETYPE': True,
    'SET_PASSWORD_RETYPE': True,
    # Aquí Djoser construirá la URL por mi, por eso no debo poner el dominio
    'PASSWORD_RESET_CONFIRM_URL': 'password/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': 'email/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SOCIAL_AUTH_TOKEN_STRATEGY': 'djoser.social.token.jwt.TokenStrategy',
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS': 
    [
        #Aqui esta mandando el backend a las urls del frontend
        'http://localhost:8100/'          #webL
    ],
    'SERIALIZERS': {
        'user_create': 'api.serializers.UserCreateSerializer',
        'user': 'api.serializers.UserCreateSerializer',
        'current_user': 'api.serializers.UserCreateSerializer',
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
    },
    'EMAIL': {
        'activation': 'api.custom_email.CreateUser', #Confirmacion de correo
        'activation_confirm': 'api.custom_email.CustomActivationConfirmEmail', #Mensaje de confirmacion exitosa y activacion de cuenta
        'password_reset': 'api.custom_email.CustomPasswordResetEmail', #solicitud para recuperar password olvidada
        'password_changed_confirmation': 'api.custom_email.CustomPasswordConfirmEmail', #enlace que abro para nueva password
        'username_reset': 'api.custom_email.CustomUsernameResetEmail', #solicitud para cambiar email
        'email_changed_confirmation': 'api.custom_email.CustomActivationNewEmail',  #solicitud para activar nuevo email 
    },
}

SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'prompt': 'select_account',  # Fuerza a elegir cuenta cada vez
    'access_type': 'offline',
}

SOCIAL_AUTH_UNIQUE_USERNAME = True
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
SOCIAL_AUTH_CLEAN_USERNAME = True
SOCIAL_AUTH_SLUGIFY_USERNAME = True

# Prevenir duplicados
SOCIAL_AUTH_GOOGLE_OAUTH2_IGNORE_DUPLICATE_EMAILS = False

# Forzar siempre selección de cuenta
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'prompt': 'select_account',
    'access_type': 'offline',
    'include_granted_scopes': 'true'
}

SOCIAL_AUTH_GOOGLE_OAUTH2_IGNORE_DUPLICATE_EMAILS = False
SOCIAL_AUTH_UNIQUE_USERNAME = True
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
###ESTE CODIGO SALE DE GOOGLE CLOUD
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'tucrendenciales'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'tucrendenciales'
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['first_name', 'last_name']

# En tu settings.py, agrega estas configuraciones:
SOCIAL_AUTH_PROCESS_EXCEPTIONS = True
SOCIAL_AUTH_RAISE_EXCEPTIONS = False
SOCIAL_AUTH_EXCEPTION_HANDLER = 'api.pipeline.social_auth_exception_handler'

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    
    # Manejar email duplicado TEMPRANO en el proceso
    'api.pipeline.handle_duplicate_email',
    
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    
    # Prevenir sobrescritura
    'api.pipeline.prevent_user_overwrite',
    
    # Nuestra asociación personalizada
    'api.pipeline.custom_associate_user',
    
    'social_core.pipeline.user.create_user', 
    
    # Asociación normal (como respaldo)
    'social_core.pipeline.social_auth.associate_user',
    
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    
    # Verificación final
    'api.pipeline.ensure_unique_association',
    'api.pipeline.print_jwt_token',
    'api.pipeline.redirect_with_token',
)


#Configuracion de Swagger
SPECTACULAR_SETTINGS = {
    'TITLE': 'Fiador API',
    'DESCRIPTION': 'API REST utilizada como Backend para la plataforma Fiador, el cual permite llevar el control de Fiados de los Clientes.',
    'VERSION': '1.0.0',
    'CONTACT': {
        'name': 'Fiador',
        'email': 'jesusmedina0921@gmail.com',
        'url': 'https://fiador.vercel.app',
    },
    #Orden de los tags en Swagger
    'TAGS': [
        {'name': 'Login', 'description': 'Operaciones de autenticación'},
        {'name': 'Token', 'description': 'Operaciones relacionadas con los tokens JWT'},
        {'name': 'auth', 'description': 'Operaciones relacionadas con la recuperacion de email/password, autenticacion de cuentas etc...'},
        {'name': 'User', 'description': 'Operaciones relacionadas con los usuarios'},
        {'name': 'Cliente', 'description': 'Operaciones relacionadas con los clientes'},
        {'name': 'Producto', 'description': 'Operaciones relacionadas con los productos'},
        {'name': 'Fiado', 'description': 'Operaciones relacionadas con los fiados'},
    ],
    'SWAGGER_UI_SETTINGS': {
        'persistAuthorization': True,
    }
}


PWA_APP_NAME = 'Fiador Admin'
PWA_APP_DESCRIPTION = "Fiador Admin"
PWA_APP_THEME_COLOR = '#161c25'
PWA_APP_BACKGROUND_COLOR = "#161c25"
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/admin/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
    {'src': '/static/images/icons/icon-72x72.png', 'sizes': '72x72'},
    {'src': '/static/images/icons/icon-96x96.png', 'sizes': '96x96'},
    {'src': '/static/images/icons/icon-128x128.png', 'sizes': '128x128'},
    {'src': '/static/images/icons/icon-144x144.png', 'sizes': '144x144'},
    {'src': '/static/images/icons/icon-152x152.png', 'sizes': '152x152'},
    {'src': '/static/images/icons/icon-192x192.png', 'sizes': '192x192'},
    {'src': '/static/images/icons/icon-384x384.png', 'sizes': '384x384'},
    {'src': '/static/images/icons/icon-512x512.png', 'sizes': '512x512'},
]
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'es'
